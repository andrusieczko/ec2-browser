(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var Table = require('./Table').default;

var PageContent = React.createClass({
  displayName: 'PageContent',

  render: function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(Table, null)
    );
  }
});

exports.default = PageContent;


},{"./Table":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableHeader = require('./TableHeader').default;
var TableContent = require('./TableContent').default;

var Table = React.createClass({
  displayName: 'Table',

  render: function render() {
    return React.createElement(
      'table',
      null,
      React.createElement(TableHeader, null),
      React.createElement(TableContent, null)
    );
  }
});

exports.default = Table;


},{"./TableContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js","./TableHeader":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var ec2Instances = require('../services/ec2').default;

var TableRow = require('./TableRow').default;

var TableContent = React.createClass({
  displayName: 'TableContent',

  getInitialState: function getInitialState() {
    return {
      data: [],
      loading: true
    };
  },

  componentDidMount: function componentDidMount() {
    var component = this;
    ec2Instances.fetchInstances().then(function (instances) {
      component.setState({
        data: instances,
        loading: false
      });
    });
  },

  render: function render() {
    var instancesRows = this.state.data.map(function (instance) {
      return React.createElement(TableRow, { key: instance.id, instance: instance });
    });
    var emptyRow = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'No results yet.'
      )
    );
    var loading = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'Loading...'
      )
    );
    var body = this.state.loading ? loading : instancesRows.length ? instancesRows : emptyRow;
    return React.createElement(
      'tbody',
      null,
      body
    );
  }
});

exports.default = TableContent;


},{"../services/ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js","./TableRow":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableHeader = React.createClass({
  displayName: "TableHeader",

  render: function render() {
    return React.createElement(
      "thead",
      null,
      React.createElement(
        "tr",
        null,
        React.createElement(
          "th",
          null,
          "Key name"
        ),
        React.createElement(
          "th",
          null,
          "Status"
        ),
        React.createElement(
          "th",
          null,
          "Instance type"
        )
      )
    );
  }
});

exports.default = TableHeader;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableRow = React.createClass({
  displayName: "TableRow",

  render: function render() {
    var instance = this.props.instance;
    return React.createElement(
      "tr",
      null,
      React.createElement(
        "td",
        null,
        instance.keyName
      ),
      React.createElement(
        "td",
        null,
        instance.status
      ),
      React.createElement(
        "td",
        null,
        instance.instanceType
      )
    );
  }
});

exports.default = TableRow;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/main.js":[function(require,module,exports){
'use strict';

var _PageContent = require('./components/PageContent');

var _PageContent2 = _interopRequireDefault(_PageContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

ReactDOM.render(React.createElement(_PageContent2.default, null), document.getElementById('content')); // let PageContent = require('./components/PageContent').default;


},{"./components/PageContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var aws = electronRequire('./aws-config.json');

var AWS = electronRequire('aws-sdk');
AWS.config.update(aws);
var ec2 = new AWS.EC2({ region: 'eu-west-1' });

var ec2Instances = {
  fetchInstances: function fetchInstances() {
    return new Promise(function (resolve) {
      ec2.describeInstances(function (err, data) {
        var instances = data.Reservations.map(function (instanceObject) {
          var instance = instanceObject.Instances[0];
          return {
            status: instance.State.Name,
            instanceType: instance.InstanceType,
            keyName: instance.KeyName,
            tags: instance.Tags.map(function (tag) {
              return {
                key: tag.Key,
                value: tag.Value
              };
            }),
            publicIpAddress: instance.PublicIpAddress,
            id: instance.InstanceId
          };
        });
        resolve(instances);
      });
    });
  }
};

exports.default = ec2Instances;


},{}]},{},["/home/karol/workspace/karol/github/ec2-browser/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
