(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Table = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table');

var _Table2 = _interopRequireDefault(_Table);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var tag = function tag(tagName) {
  return function (instance) {
    return instance.tags.filter(function (tag) {
      return tag.key === tagName;
    })[0].value;
  };
};

var PageContent = React.createClass({
  displayName: 'PageContent',

  columns: [{ name: "Id", key: 'id' }, { name: "Name", key: tag("Name") }, { name: "Key name", key: 'keyName' }, { name: "Instance type", key: 'instanceType' }, { name: "Status", key: 'status' }],

  render: function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(_Table2.default, { columns: this.columns, data: this.props.data, loading: this.props.loading })
    );
  }
});

exports.default = PageContent;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Sidebar.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var Sidebar = React.createClass({
  displayName: "Sidebar",

  render: function render() {
    return React.createElement(
      "ul",
      { className: "list-group" },
      React.createElement(
        "li",
        { className: "list-group-header" },
        React.createElement(
          "h4",
          null,
          "Regions"
        )
      ),
      React.createElement(
        "li",
        { className: "list-group-item" },
        React.createElement("img", { className: "img-circle media-object pull-left", src: "http://media.amazonwebservices.com/aws_singlebox_01.png", width: "32", height: "32" }),
        React.createElement(
          "div",
          { className: "media-body" },
          React.createElement(
            "strong",
            null,
            "EU (Ireland)"
          ),
          React.createElement(
            "p",
            null,
            "0 running"
          )
        )
      ),
      React.createElement(
        "li",
        { className: "list-group-item" },
        React.createElement("img", { className: "img-circle media-object pull-left", src: "http://media.amazonwebservices.com/aws_singlebox_01.png", width: "32", height: "32" }),
        React.createElement(
          "div",
          { className: "media-body" },
          React.createElement(
            "strong",
            null,
            "US West (N. Carolina)"
          ),
          React.createElement(
            "p",
            null,
            "2 running"
          )
        )
      )
    );
  }
});

exports.default = Sidebar;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TableHeader = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader');

var _TableHeader2 = _interopRequireDefault(_TableHeader);

var _TableContent = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent');

var _TableContent2 = _interopRequireDefault(_TableContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Table = React.createClass({
  displayName: 'Table',

  render: function render() {
    return React.createElement(
      'table',
      null,
      React.createElement(_TableHeader2.default, { columns: this.props.columns }),
      React.createElement(_TableContent2.default, { data: this.props.data,
        columns: this.props.columns,
        loading: this.props.loading })
    );
  }
});

exports.default = Table;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js","/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ec = require('/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2');

var _ec2 = _interopRequireDefault(_ec);

var _TableRow = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TableContent = React.createClass({
  displayName: 'TableContent',

  render: function render() {
    var _this = this;

    var instancesRows = this.props.data.map(function (instance) {
      return React.createElement(_TableRow2.default, { key: instance.id, instance: instance, columns: _this.props.columns });
    });
    var emptyRow = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'No results yet.'
      )
    );
    var loading = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'Loading...'
      )
    );
    var body = this.props.loading ? loading : instancesRows.length ? instancesRows : emptyRow;
    return React.createElement(
      'tbody',
      null,
      body
    );
  }
});

exports.default = TableContent;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js","/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableHeader = React.createClass({
  displayName: "TableHeader",

  render: function render() {
    var headers = this.props.columns.map(function (column, index) {
      return React.createElement(
        "th",
        { key: index },
        column.name
      );
    });
    return React.createElement(
      "thead",
      null,
      React.createElement(
        "tr",
        null,
        headers
      )
    );
  }
});

exports.default = TableHeader;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableRow = React.createClass({
  displayName: "TableRow",

  render: function render() {
    var instance = this.props.instance;
    var columns = this.props.columns.map(function (column) {
      var key = column.key;
      var value = typeof key === "function" ? key(instance) : instance[key];

      return React.createElement(
        "td",
        { key: value },
        value
      );
    });
    return React.createElement(
      "tr",
      null,
      columns
    );
  }
});

exports.default = TableRow;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Window.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Sidebar = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/Sidebar');

var _Sidebar2 = _interopRequireDefault(_Sidebar);

var _PageContent = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent');

var _PageContent2 = _interopRequireDefault(_PageContent);

var _ec = require('/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2');

var _ec2 = _interopRequireDefault(_ec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Window = React.createClass({
  displayName: 'Window',

  getInitialState: function getInitialState() {
    return {
      data: [],
      loading: true,
      region: 'eu-west-1'
    };
  },

  fetchInstances: function fetchInstances(region) {
    var component = this;
    _ec2.default.fetchInstances(region).then(function (instances) {
      component.setState({
        data: instances,
        loading: false
      });
    });
  },

  componentDidMount: function componentDidMount() {
    this.fetchInstances(this.state.region);
  },

  changeRegion: function changeRegion(e) {
    var region = e.target.value;
    this.setState({
      region: region,
      loading: true
    });
    this.fetchInstances(region);
  },

  render: function render() {
    return React.createElement(
      'div',
      { className: 'pane-group' },
      React.createElement(
        'div',
        { className: 'pane-sm sidebar' },
        React.createElement(_Sidebar2.default, null)
      ),
      React.createElement(
        'div',
        { className: 'pane' },
        React.createElement(
          'select',
          { value: this.state.region, onChange: this.changeRegion },
          React.createElement(
            'option',
            { value: 'us-west-2' },
            'us-west-2'
          ),
          React.createElement(
            'option',
            { value: 'eu-west-1' },
            'eu-west-1'
          )
        ),
        React.createElement(_PageContent2.default, { region: this.state.region, loading: this.state.loading, data: this.state.data })
      )
    );
  }
});

exports.default = Window;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js","/home/karol/workspace/karol/github/ec2-browser/src/js/components/Sidebar":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Sidebar.js","/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/main.js":[function(require,module,exports){
'use strict';

var _Window = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/Window');

var _Window2 = _interopRequireDefault(_Window);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

ReactDOM.render(React.createElement(_Window2.default, null), document.getElementById('window-content'));


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Window":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Window.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var aws = electronRequire('./aws-config.json');

var AWS = electronRequire('aws-sdk');
AWS.config.update(aws);

var ec2Instances = {
  fetchInstances: function fetchInstances() {
    var region = arguments.length <= 0 || arguments[0] === undefined ? 'eu-west-1' : arguments[0];

    return new Promise(function (resolve) {
      var ec2 = new AWS.EC2({ region: region });
      ec2.describeInstances(function (err, data) {
        console.log(data);
        var instances = data.Reservations.map(function (instanceObject) {
          var instance = instanceObject.Instances[0];
          return {
            status: instance.State.Name,
            instanceType: instance.InstanceType,
            keyName: instance.KeyName,
            tags: instance.Tags.map(function (tag) {
              return {
                key: tag.Key,
                value: tag.Value
              };
            }),
            publicIpAddress: instance.PublicIpAddress,
            id: instance.InstanceId
          };
        });
        resolve(instances);
      });
    });
  }
};

exports.default = ec2Instances;


},{}]},{},["/home/karol/workspace/karol/github/ec2-browser/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
