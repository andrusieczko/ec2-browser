(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = React.createClass({
  displayName: "TableRow",

  render: function render() {
    var instance = this.props.instance;
    return React.createElement(
      "tr",
      null,
      React.createElement(
        "td",
        null,
        instance.keyName
      ),
      React.createElement(
        "td",
        null,
        instance.status
      ),
      React.createElement(
        "td",
        null,
        instance.instanceType
      )
    );
  }
});


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/ec2.js":[function(require,module,exports){
"use strict";

var aws = electronRequire('./aws-config.json');

var AWS = electronRequire('aws-sdk');
AWS.config.update(aws);
var ec2 = new AWS.EC2({ region: 'eu-west-1' });

var ec2Instances = {
  fetchInstances: function fetchInstances() {
    return new Promise(function (resolve) {
      ec2.describeInstances(function (err, data) {
        var instances = data.Reservations.map(function (instanceObject) {
          var instance = instanceObject.Instances[0];
          return {
            status: instance.State.Name,
            instanceType: instance.InstanceType,
            keyName: instance.KeyName,
            tags: instance.Tags.map(function (tag) {
              return {
                key: tag.Key,
                value: tag.Value
              };
            }),
            publicIpAddress: instance.PublicIpAddress,
            id: instance.InstanceId
          };
        });
        resolve(instances);
      });
    });
  }
};

var TableRow = require('./components/TableRow').default;

var TableHeader = React.createClass({
  displayName: 'TableHeader',

  render: function render() {
    return React.createElement(
      'thead',
      null,
      React.createElement(
        'tr',
        null,
        React.createElement(
          'th',
          null,
          'Key name'
        ),
        React.createElement(
          'th',
          null,
          'Status'
        ),
        React.createElement(
          'th',
          null,
          'Instance type'
        )
      )
    );
  }
});

var TableContent = React.createClass({
  displayName: 'TableContent',

  getInitialState: function getInitialState() {
    return {
      data: [],
      loading: true
    };
  },

  componentDidMount: function componentDidMount() {
    var component = this;
    ec2Instances.fetchInstances().then(function (instances) {
      component.setState({
        data: instances,
        loading: false
      });
    });
  },

  render: function render() {
    var instancesRows = this.state.data.map(function (instance) {
      return React.createElement(TableRow, { key: instance.id, instance: instance });
    });
    var emptyRow = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'No results yet.'
      )
    );
    var loading = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'Loading...'
      )
    );
    var body = this.state.loading ? loading : instancesRows.length ? instancesRows : emptyRow;
    return React.createElement(
      'tbody',
      null,
      body
    );
  }
});

var Table = React.createClass({
  displayName: 'Table',

  render: function render() {
    return React.createElement(
      'table',
      null,
      React.createElement(TableHeader, null),
      React.createElement(TableContent, null)
    );
  }
});

var Content = React.createClass({
  displayName: 'Content',

  render: function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(Table, null)
    );
  }
});

ReactDOM.render(React.createElement(Content, null), document.getElementById('content'));


},{"./components/TableRow":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/main.js":[function(require,module,exports){
'use strict';

require('./ec2');


},{"./ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/ec2.js"}]},{},["/home/karol/workspace/karol/github/ec2-browser/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
