(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Table = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table');

var _Table2 = _interopRequireDefault(_Table);

var _ec = require('/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2');

var _ec2 = _interopRequireDefault(_ec);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PageContent = React.createClass({
  displayName: 'PageContent',

  columns: [{ name: "Id", key: 'id' }, { name: "Key name", key: 'keyName' }, { name: "Instance type", key: 'instanceType' }, { name: "Status", key: 'status' }],
  getInitialState: function getInitialState() {
    return {
      data: [],
      loading: true
    };
  },
  componentDidMount: function componentDidMount() {
    var component = this;
    _ec2.default.fetchInstances().then(function (instances) {
      component.setState({
        data: instances,
        loading: false
      });
    });
  },
  render: function render() {
    return React.createElement(
      'div',
      null,
      React.createElement(_Table2.default, { columns: this.columns, data: this.state.data, loading: this.state.loading })
    );
  }
});

exports.default = PageContent;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js","/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/Table.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TableHeader = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader');

var _TableHeader2 = _interopRequireDefault(_TableHeader);

var _TableContent = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent');

var _TableContent2 = _interopRequireDefault(_TableContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Table = React.createClass({
  displayName: 'Table',

  render: function render() {
    return React.createElement(
      'table',
      null,
      React.createElement(_TableHeader2.default, { columns: this.props.columns }),
      React.createElement(_TableContent2.default, { data: this.props.data,
        columns: this.props.columns,
        loading: this.props.loading })
    );
  }
});

exports.default = Table;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js","/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableContent.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _ec = require('/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2');

var _ec2 = _interopRequireDefault(_ec);

var _TableRow = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow');

var _TableRow2 = _interopRequireDefault(_TableRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TableContent = React.createClass({
  displayName: 'TableContent',

  render: function render() {
    var _this = this;

    var instancesRows = this.props.data.map(function (instance) {
      return React.createElement(_TableRow2.default, { key: instance.id, instance: instance, columns: _this.props.columns });
    });
    var emptyRow = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'No results yet.'
      )
    );
    var loading = React.createElement(
      'tr',
      null,
      React.createElement(
        'td',
        { colSpan: '4' },
        'Loading...'
      )
    );
    var body = this.props.loading ? loading : instancesRows.length ? instancesRows : emptyRow;
    return React.createElement(
      'tbody',
      null,
      body
    );
  }
});

exports.default = TableContent;


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js","/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2":"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableHeader.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableHeader = React.createClass({
  displayName: "TableHeader",

  render: function render() {
    var headers = this.props.columns.map(function (column, index) {
      return React.createElement(
        "th",
        { key: index },
        column.name
      );
    });
    return React.createElement(
      "thead",
      null,
      React.createElement(
        "tr",
        null,
        headers
      )
    );
  }
});

exports.default = TableHeader;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/components/TableRow.js":[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var TableRow = React.createClass({
  displayName: "TableRow",

  render: function render() {
    var instance = this.props.instance;
    var columns = this.props.columns.map(function (column) {
      return React.createElement(
        "td",
        { key: instance[column.key] },
        instance[column.key]
      );
    });
    return React.createElement(
      "tr",
      null,
      columns
    );
  }
});

exports.default = TableRow;


},{}],"/home/karol/workspace/karol/github/ec2-browser/src/js/main.js":[function(require,module,exports){
'use strict';

var _PageContent = require('/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent');

var _PageContent2 = _interopRequireDefault(_PageContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

ReactDOM.render(React.createElement(_PageContent2.default, null), document.getElementById('content'));


},{"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent":"/home/karol/workspace/karol/github/ec2-browser/src/js/components/PageContent.js"}],"/home/karol/workspace/karol/github/ec2-browser/src/js/services/ec2.js":[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var aws = electronRequire('./aws-config.json');

var AWS = electronRequire('aws-sdk');
AWS.config.update(aws);
var ec2 = new AWS.EC2({ region: 'eu-west-1' });

var ec2Instances = {
  fetchInstances: function fetchInstances() {
    return new Promise(function (resolve) {
      ec2.describeInstances(function (err, data) {
        var instances = data.Reservations.map(function (instanceObject) {
          var instance = instanceObject.Instances[0];
          return {
            status: instance.State.Name,
            instanceType: instance.InstanceType,
            keyName: instance.KeyName,
            tags: instance.Tags.map(function (tag) {
              return {
                key: tag.Key,
                value: tag.Value
              };
            }),
            publicIpAddress: instance.PublicIpAddress,
            id: instance.InstanceId
          };
        });
        resolve(instances);
      });
    });
  }
};

exports.default = ec2Instances;


},{}]},{},["/home/karol/workspace/karol/github/ec2-browser/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9jb21wb25lbnRzL1BhZ2VDb250ZW50LmpzIiwiL2hvbWUva2Fyb2wvd29ya3NwYWNlL2thcm9sL2dpdGh1Yi9lYzItYnJvd3Nlci9zcmMvanMvY29tcG9uZW50cy9UYWJsZS5qcyIsIi9ob21lL2thcm9sL3dvcmtzcGFjZS9rYXJvbC9naXRodWIvZWMyLWJyb3dzZXIvc3JjL2pzL2NvbXBvbmVudHMvVGFibGVDb250ZW50LmpzIiwiL2hvbWUva2Fyb2wvd29ya3NwYWNlL2thcm9sL2dpdGh1Yi9lYzItYnJvd3Nlci9zcmMvanMvY29tcG9uZW50cy9UYWJsZUhlYWRlci5qcyIsIi9ob21lL2thcm9sL3dvcmtzcGFjZS9rYXJvbC9naXRodWIvZWMyLWJyb3dzZXIvc3JjL2pzL2NvbXBvbmVudHMvVGFibGVSb3cuanMiLCIvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9tYWluLmpzIiwiL2hvbWUva2Fyb2wvd29ya3NwYWNlL2thcm9sL2dpdGh1Yi9lYzItYnJvd3Nlci9zcmMvanMvc2VydmljZXMvZWMyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUEsWUFBWSxDQUFDOztBQUViLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQyxLQUFLLEVBQUUsSUFBSTtBQUNiLENBQUMsQ0FBQyxDQUFDOztBQUVILElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyx3RUFBd0UsQ0FBQyxDQUFDOztBQUUvRixJQUFJLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7QUFFN0MsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLG9FQUFvRSxDQUFDLENB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SSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxjQUFjLEVBQUU7VUFDOUQsSUFBSSxRQUFRLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztVQUMzQyxPQUFPO1lBQ0wsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSTtZQUMzQixZQUFZLEVBQUUsUUFBUSxDQUFDLFlBQVk7WUFDbkMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxPQUFPO1lBQ3pCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsRUFBRTtjQUNyQyxPQUFPO2dCQUNMLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBRztnQkFDWixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUs7ZUFDakIsQ0FBQzthQUNILENBQUM7WUFDRixlQUFlLEVBQUUsUUFBUSxDQUFDLGVBQWU7WUFDekMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxVQUFVO1dBQ3hCLENBQUM7U0FDSCxDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7T0FDcEIsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBQ0o7QUFDSCxDQUFDLENBQUM7O0FBRUYsT0FBTyxDQUFDLE9BQU8sR0FBRyxZQUFZLENBQUM7QUFDL0IiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1RhYmxlID0gcmVxdWlyZSgnL2hvbWUva2Fyb2wvd29ya3NwYWNlL2thcm9sL2dpdGh1Yi9lYzItYnJvd3Nlci9zcmMvanMvY29tcG9uZW50cy9UYWJsZScpO1xuXG52YXIgX1RhYmxlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYmxlKTtcblxudmFyIF9lYyA9IHJlcXVpcmUoJy9ob21lL2thcm9sL3dvcmtzcGFjZS9rYXJvbC9naXRodWIvZWMyLWJyb3dzZXIvc3JjL2pzL3NlcnZpY2VzL2VjMicpO1xuXG52YXIgX2VjMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VjKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBhZ2VDb250ZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1BhZ2VDb250ZW50JyxcblxuICBjb2x1bW5zOiBbeyBuYW1lOiBcIklkXCIsIGtleTogJ2lkJyB9LCB7IG5hbWU6IFwiS2V5IG5hbWVcIiwga2V5OiAna2V5TmFtZScgfSwgeyBuYW1lOiBcIkluc3RhbmNlIHR5cGVcIiwga2V5OiAnaW5zdGFuY2VUeXBlJyB9LCB7IG5hbWU6IFwiU3RhdHVzXCIsIGtleTogJ3N0YXR1cycgfV0sXG4gIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiBbXSxcbiAgICAgIGxvYWRpbmc6IHRydWVcbiAgICB9O1xuICB9LFxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdmFyIGNvbXBvbmVudCA9IHRoaXM7XG4gICAgX2VjMi5kZWZhdWx0LmZldGNoSW5zdGFuY2VzKCkudGhlbihmdW5jdGlvbiAoaW5zdGFuY2VzKSB7XG4gICAgICBjb21wb25lbnQuc2V0U3RhdGUoe1xuICAgICAgICBkYXRhOiBpbnN0YW5jZXMsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAnZGl2JyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KF9UYWJsZTIuZGVmYXVsdCwgeyBjb2x1bW5zOiB0aGlzLmNvbHVtbnMsIGRhdGE6IHRoaXMuc3RhdGUuZGF0YSwgbG9hZGluZzogdGhpcy5zdGF0ZS5sb2FkaW5nIH0pXG4gICAgKTtcbiAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBhZ2VDb250ZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklsQmhaMlZEYjI1MFpXNTBMbXB6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPenM3T3pzN096czdRVUZIUVN4SlFVRkpMRmRCUVZjc1IwRkJSeXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZET3pzN1FVRkRiRU1zVTBGQlR5eEZRVUZGTEVOQlExQXNSVUZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVTXNSVUZEZGtJc1JVRkJReXhKUVVGSkxFVkJRVVVzVlVGQlZTeEZRVUZGTEVkQlFVY3NSVUZCUlN4VFFVRlRMRVZCUVVNc1JVRkRiRU1zUlVGQlF5eEpRVUZKTEVWQlFVVXNaVUZCWlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hqUVVGakxFVkJRVU1zUlVGRE5VTXNSVUZCUXl4SlFVRkpMRVZCUVVVc1VVRkJVU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVWQlFVTXNRMEZEYUVNN1FVRkRSQ3hwUWtGQlpTeEZRVUZGTERKQ1FVRlhPMEZCUXpGQ0xGZEJRVTg3UVVGRFRDeFZRVUZKTEVWQlFVVXNSVUZCUlR0QlFVTlNMR0ZCUVU4c1JVRkJSU3hKUVVGSk8wdEJRMlFzUTBGQlF6dEhRVU5JTzBGQlEwUXNiVUpCUVdsQ0xFVkJRVVVzTmtKQlFWYzdRVUZETlVJc1VVRkJTU3hUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZETzBGQlEzSkNMR2xDUVVGSkxHTkJRV01zUlVGQlJTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRkRMRk5CUVZNc1JVRkJTenRCUVVOMlF5eGxRVUZUTEVOQlFVTXNVVUZCVVN4RFFVRkRPMEZCUTJwQ0xGbEJRVWtzUlVGQlJTeFRRVUZUTzBGQlEyWXNaVUZCVHl4RlFVRkZMRXRCUVVzN1QwRkRaaXhEUVVGRExFTkJRVU03UzBGRFNpeERRVUZETEVOQlFVTTdSMEZEU2p0QlFVTkVMRkZCUVUwc1JVRkJSU3hyUWtGQlZ6dEJRVU5xUWl4WFFVTkZPenM3VFVGRFJTeDFRMEZCVHl4UFFVRlBMRVZCUVVVc1NVRkJTU3hEUVVGRExFOUJRVThzUVVGQlF5eEZRVUZETEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUVVGQlF5eEZRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUVVGQlF5eEhRVUZITzB0QlEyaEdMRU5CUTA0N1IwRkRTRHREUVVOR0xFTkJRVU1zUTBGQlF6czdhMEpCUlZrc1YwRkJWeUlzSW1acGJHVWlPaUpRWVdkbFEyOXVkR1Z1ZEM1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJdUwzTnlZeTlxY3k4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1ZHRmliR1VnWm5KdmJTQW5ZMjl0Y0c5dVpXNTBjeTlVWVdKc1pTYzdYRzVwYlhCdmNuUWdaV015SUdaeWIyMGdKM05sY25acFkyVnpMMlZqTWljN1hHNWNibXhsZENCUVlXZGxRMjl1ZEdWdWRDQTlJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpLSHRjYmlBZ1kyOXNkVzF1Y3pvZ1cxeHVJQ0FnSUh0dVlXMWxPaUJjSWtsa1hDSXNJR3RsZVRvZ0oybGtKMzBzWEc0Z0lDQWdlMjVoYldVNklGd2lTMlY1SUc1aGJXVmNJaXdnYTJWNU9pQW5hMlY1VG1GdFpTZDlMRnh1SUNBZ0lIdHVZVzFsT2lCY0lrbHVjM1JoYm1ObElIUjVjR1ZjSWl3Z2EyVjVPaUFuYVc1emRHRnVZMlZVZVhCbEozMHNYRzRnSUNBZ2UyNWhiV1U2SUZ3aVUzUmhkSFZ6WENJc0lHdGxlVG9nSjNOMFlYUjFjeWQ5WEc0Z0lGMHNYRzRnSUdkbGRFbHVhWFJwWVd4VGRHRjBaVG9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJR1JoZEdFNklGdGRMRnh1SUNBZ0lDQWdiRzloWkdsdVp6b2dkSEoxWlZ4dUlDQWdJSDA3WEc0Z0lIMHNYRzRnSUdOdmJYQnZibVZ1ZEVScFpFMXZkVzUwT2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCc1pYUWdZMjl0Y0c5dVpXNTBJRDBnZEdocGN6dGNiaUFnSUNCbFl6SXVabVYwWTJoSmJuTjBZVzVqWlhNb0tTNTBhR1Z1S0NocGJuTjBZVzVqWlhNcElEMCtJSHRjYmlBZ0lDQWdJR052YlhCdmJtVnVkQzV6WlhSVGRHRjBaU2g3WEc0Z0lDQWdJQ0FnSUdSaGRHRTZJR2x1YzNSaGJtTmxjeXhjYmlBZ0lDQWdJQ0FnYkc5aFpHbHVaem9nWm1Gc2MyVmNiaUFnSUNBZ0lIMHBPMXh1SUNBZ0lIMHBPMXh1SUNCOUxGeHVJQ0J5Wlc1a1pYSTZJR1oxYm1OMGFXOXVLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQThaR2wyUGx4dUlDQWdJQ0FnSUNBOFZHRmliR1VnWTI5c2RXMXVjejE3ZEdocGN5NWpiMngxYlc1emZTQmtZWFJoUFh0MGFHbHpMbk4wWVhSbExtUmhkR0Y5SUd4dllXUnBibWM5ZTNSb2FYTXVjM1JoZEdVdWJHOWhaR2x1WjMwZ0x6NWNiaUFnSUNBZ0lEd3ZaR2wyUGx4dUlDQWdJQ2s3WEc0Z0lIMWNibjBwTzF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUVlXZGxRMjl1ZEdWdWREc2lYWDA9IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX1RhYmxlSGVhZGVyID0gcmVxdWlyZSgnL2hvbWUva2Fyb2wvd29ya3NwYWNlL2thcm9sL2dpdGh1Yi9lYzItYnJvd3Nlci9zcmMvanMvY29tcG9uZW50cy9UYWJsZUhlYWRlcicpO1xuXG52YXIgX1RhYmxlSGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYmxlSGVhZGVyKTtcblxudmFyIF9UYWJsZUNvbnRlbnQgPSByZXF1aXJlKCcvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9jb21wb25lbnRzL1RhYmxlQ29udGVudCcpO1xuXG52YXIgX1RhYmxlQ29udGVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UYWJsZUNvbnRlbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgVGFibGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVGFibGUnLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgJ3RhYmxlJyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KF9UYWJsZUhlYWRlcjIuZGVmYXVsdCwgeyBjb2x1bW5zOiB0aGlzLnByb3BzLmNvbHVtbnMgfSksXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KF9UYWJsZUNvbnRlbnQyLmRlZmF1bHQsIHsgZGF0YTogdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgICBjb2x1bW5zOiB0aGlzLnByb3BzLmNvbHVtbnMsXG4gICAgICAgIGxvYWRpbmc6IHRoaXMucHJvcHMubG9hZGluZyB9KVxuICAgICk7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUYWJsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbFJoWW14bExtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN1FVRkhRU3hKUVVGSkxFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRPenM3UVVGRE5VSXNVVUZCVFN4RlFVRkZMR3RDUVVGWE8wRkJRMnBDTEZkQlEwVTdPenROUVVORkxEWkRRVUZoTEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUVVGQlF5eEhRVUZITzAxQlF6VkRMRGhEUVVGakxFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1FVRkJRenRCUVVOMFFpeGxRVUZQTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFRkJRVU03UVVGRE5VSXNaVUZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEJRVUZETEVkQlFVVTdTMEZEZEVNc1EwRkRVanRIUVVOSU8wTkJRMFlzUTBGQlF5eERRVUZET3p0clFrRkZXU3hMUVVGTElpd2labWxzWlNJNklsUmhZbXhsTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk0dmMzSmpMMnB6THlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCVVlXSnNaVWhsWVdSbGNpQm1jbTl0SUNkamIyMXdiMjVsYm5SekwxUmhZbXhsU0dWaFpHVnlKenRjYm1sdGNHOXlkQ0JVWVdKc1pVTnZiblJsYm5RZ1puSnZiU0FuWTI5dGNHOXVaVzUwY3k5VVlXSnNaVU52Ym5SbGJuUW5PMXh1WEc1c1pYUWdWR0ZpYkdVZ1BTQlNaV0ZqZEM1amNtVmhkR1ZEYkdGemN5aDdYRzRnSUhKbGJtUmxjam9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJQ2hjYmlBZ0lDQWdJRHgwWVdKc1pUNWNiaUFnSUNBZ0lDQWdQRlJoWW14bFNHVmhaR1Z5SUdOdmJIVnRibk05ZTNSb2FYTXVjSEp2Y0hNdVkyOXNkVzF1YzMwZ0x6NWNiaUFnSUNBZ0lDQWdQRlJoWW14bFEyOXVkR1Z1ZENCa1lYUmhQWHQwYUdsekxuQnliM0J6TG1SaGRHRjlJRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiSFZ0Ym5NOWUzUm9hWE11Y0hKdmNITXVZMjlzZFcxdWMzMWNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyRmthVzVuUFh0MGFHbHpMbkJ5YjNCekxteHZZV1JwYm1kOUx6NWNiaUFnSUNBZ0lEd3ZkR0ZpYkdVK1hHNGdJQ0FnS1R0Y2JpQWdmVnh1ZlNrN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGUmhZbXhsT3lKZGZRPT0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZWMgPSByZXF1aXJlKCcvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9zZXJ2aWNlcy9lYzInKTtcblxudmFyIF9lYzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYyk7XG5cbnZhciBfVGFibGVSb3cgPSByZXF1aXJlKCcvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9jb21wb25lbnRzL1RhYmxlUm93Jyk7XG5cbnZhciBfVGFibGVSb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGFibGVSb3cpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgVGFibGVDb250ZW50ID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuICBkaXNwbGF5TmFtZTogJ1RhYmxlQ29udGVudCcsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBpbnN0YW5jZXNSb3dzID0gdGhpcy5wcm9wcy5kYXRhLm1hcChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9UYWJsZVJvdzIuZGVmYXVsdCwgeyBrZXk6IGluc3RhbmNlLmlkLCBpbnN0YW5jZTogaW5zdGFuY2UsIGNvbHVtbnM6IF90aGlzLnByb3BzLmNvbHVtbnMgfSk7XG4gICAgfSk7XG4gICAgdmFyIGVtcHR5Um93ID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd0cicsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3RkJyxcbiAgICAgICAgeyBjb2xTcGFuOiAnNCcgfSxcbiAgICAgICAgJ05vIHJlc3VsdHMgeWV0LidcbiAgICAgIClcbiAgICApO1xuICAgIHZhciBsb2FkaW5nID0gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd0cicsXG4gICAgICBudWxsLFxuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3RkJyxcbiAgICAgICAgeyBjb2xTcGFuOiAnNCcgfSxcbiAgICAgICAgJ0xvYWRpbmcuLi4nXG4gICAgICApXG4gICAgKTtcbiAgICB2YXIgYm9keSA9IHRoaXMucHJvcHMubG9hZGluZyA/IGxvYWRpbmcgOiBpbnN0YW5jZXNSb3dzLmxlbmd0aCA/IGluc3RhbmNlc1Jvd3MgOiBlbXB0eVJvdztcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICd0Ym9keScsXG4gICAgICBudWxsLFxuICAgICAgYm9keVxuICAgICk7XG4gIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBUYWJsZUNvbnRlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSaFlteGxRMjl1ZEdWdWRDNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3pzN096czdPenM3T3pzN08wRkJSMEVzU1VGQlNTeFpRVUZaTEVkQlFVY3NTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJRenM3TzBGQlEyNURMRkZCUVUwc1JVRkJSU3hyUWtGQlZ6czdPMEZCUTJwQ0xGRkJRVWtzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZETEZGQlFWRXNSVUZCU3p0QlFVTndSQ3hoUVVORkxEQkRRVUZWTEVkQlFVY3NSVUZCUlN4UlFVRlJMRU5CUVVNc1JVRkJSU3hCUVVGRExFVkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNRVUZCUXl4RlFVRkRMRTlCUVU4c1JVRkJSU3hOUVVGTExFdEJRVXNzUTBGQlF5eFBRVUZQTEVGQlFVTXNSMEZCUnl4RFFVTXZSVHRMUVVOSUxFTkJRVU1zUTBGQlF6dEJRVU5JTEZGQlFVa3NVVUZCVVN4SFFVTldPenM3VFVGRFJUczdWVUZCU1N4UFFVRlBMRVZCUVVNc1IwRkJSenM3VDBGQmNVSTdTMEZEYWtNc1FVRkRUaXhEUVVGRE8wRkJRMFlzVVVGQlNTeFBRVUZQTEVkQlExUTdPenROUVVORk96dFZRVUZKTEU5QlFVOHNSVUZCUXl4SFFVRkhPenRQUVVGblFqdExRVU0xUWl4QlFVTk9MRU5CUVVNN1FVRkRSaXhSUVVGSkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFZEJRVWNzWVVGQllTeERRVUZETEUxQlFVMHNSMEZCUnl4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRE8wRkJRekZHTEZkQlEwVTdPenROUVVOSExFbEJRVWs3UzBGRFF5eERRVU5TTzBkQlEwZzdRMEZEUml4RFFVRkRMRU5CUVVNN08ydENRVVZaTEZsQlFWa2lMQ0ptYVd4bElqb2lWR0ZpYkdWRGIyNTBaVzUwTG1weklpd2ljMjkxY21ObFVtOXZkQ0k2SWk0dmMzSmpMMnB6THlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCbFl6SWdabkp2YlNBbmMyVnlkbWxqWlhNdlpXTXlKenRjYm1sdGNHOXlkQ0JVWVdKc1pWSnZkeUJtY205dElDZGpiMjF3YjI1bGJuUnpMMVJoWW14bFVtOTNKenRjYmx4dWJHVjBJRlJoWW14bFEyOXVkR1Z1ZENBOUlGSmxZV04wTG1OeVpXRjBaVU5zWVhOektIdGNiaUFnY21WdVpHVnlPaUJtZFc1amRHbHZiaWdwSUh0Y2JpQWdJQ0JzWlhRZ2FXNXpkR0Z1WTJWelVtOTNjeUE5SUhSb2FYTXVjSEp2Y0hNdVpHRjBZUzV0WVhBb0tHbHVjM1JoYm1ObEtTQTlQaUI3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdLRnh1SUNBZ0lDQWdJQ0E4VkdGaWJHVlNiM2NnYTJWNVBYdHBibk4wWVc1alpTNXBaSDBnYVc1emRHRnVZMlU5ZTJsdWMzUmhibU5sZlNCamIyeDFiVzV6UFh0MGFHbHpMbkJ5YjNCekxtTnZiSFZ0Ym5OOUlDOCtYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHeGxkQ0JsYlhCMGVWSnZkeUE5SUNoY2JpQWdJQ0FnSUR4MGNqNWNiaUFnSUNBZ0lDQWdQSFJrSUdOdmJGTndZVzQ5WENJMFhDSStUbThnY21WemRXeDBjeUI1WlhRdVBDOTBaRDVjYmlBZ0lDQWdJRHd2ZEhJK1hHNGdJQ0FnS1R0Y2JpQWdJQ0JzWlhRZ2JHOWhaR2x1WnlBOUlDaGNiaUFnSUNBZ0lEeDBjajVjYmlBZ0lDQWdJQ0FnUEhSa0lHTnZiRk53WVc0OVhDSTBYQ0krVEc5aFpHbHVaeTR1TGp3dmRHUStYRzRnSUNBZ0lDQThMM1J5UGx4dUlDQWdJQ2s3WEc0Z0lDQWdiR1YwSUdKdlpIa2dQU0IwYUdsekxuQnliM0J6TG14dllXUnBibWNnUHlCc2IyRmthVzVuSURvZ2FXNXpkR0Z1WTJWelVtOTNjeTVzWlc1bmRHZ2dQeUJwYm5OMFlXNWpaWE5TYjNkeklEb2daVzF3ZEhsU2IzYzdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4MFltOWtlVDVjYmlBZ0lDQWdJQ0FnZTJKdlpIbDlYRzRnSUNBZ0lDQThMM1JpYjJSNVBseHVJQ0FnSUNrN1hHNGdJSDFjYm4wcE8xeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlVZV0pzWlVOdmJuUmxiblE3WEc0aVhYMD0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBUYWJsZUhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgZGlzcGxheU5hbWU6IFwiVGFibGVIZWFkZXJcIixcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgaGVhZGVycyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHtcbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInRoXCIsXG4gICAgICAgIHsga2V5OiBpbmRleCB9LFxuICAgICAgICBjb2x1bW4ubmFtZVxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIFwidGhlYWRcIixcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBcInRyXCIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGhlYWRlcnNcbiAgICAgIClcbiAgICApO1xuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGFibGVIZWFkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSaFlteGxTR1ZoWkdWeUxtcHpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzBGQlFVRXNTVUZCU1N4WFFVRlhMRWRCUVVjc1MwRkJTeXhEUVVGRExGZEJRVmNzUTBGQlF6czdPMEZCUTJ4RExGRkJRVTBzUlVGQlJTeHJRa0ZCVnp0QlFVTnFRaXhSUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlF5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RlFVRkxPMEZCUTNSRUxHRkJRMFU3TzFWQlFVa3NSMEZCUnl4RlFVRkZMRXRCUVVzc1FVRkJRenRSUVVGRkxFMUJRVTBzUTBGQlF5eEpRVUZKTzA5QlFVMHNRMEZEYkVNN1MwRkRTQ3hEUVVGRExFTkJRVU03UVVGRFNDeFhRVU5GT3pzN1RVRkRSVHM3TzFGQlEwY3NUMEZCVHp0UFFVTk1PMHRCUTBNc1EwRkRVanRIUVVOSU8wTkJRMFlzUTBGQlF5eERRVUZET3p0clFrRkZXU3hYUVVGWElpd2labWxzWlNJNklsUmhZbXhsU0dWaFpHVnlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTR2YzNKakwycHpMeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW14bGRDQlVZV0pzWlVobFlXUmxjaUE5SUZKbFlXTjBMbU55WldGMFpVTnNZWE56S0h0Y2JpQWdjbVZ1WkdWeU9pQm1kVzVqZEdsdmJpZ3BJSHRjYmlBZ0lDQnNaWFFnYUdWaFpHVnljeUE5SUhSb2FYTXVjSEp2Y0hNdVkyOXNkVzF1Y3k1dFlYQW9LR052YkhWdGJpd2dhVzVrWlhncElEMCtJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQW9YRzRnSUNBZ0lDQWdJRHgwYUNCclpYazllMmx1WkdWNGZUNTdZMjlzZFcxdUxtNWhiV1Y5UEM5MGFENWNiaUFnSUNBZ0lDazdYRzRnSUNBZ2ZTazdYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUR4MGFHVmhaRDVjYmlBZ0lDQWdJQ0FnUEhSeVBseHVJQ0FnSUNBZ0lDQWdJSHRvWldGa1pYSnpmVnh1SUNBZ0lDQWdJQ0E4TDNSeVBseHVJQ0FnSUNBZ1BDOTBhR1ZoWkQ1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5S1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1ZHRmliR1ZJWldGa1pYSTdJbDE5IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgVGFibGVSb3cgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiBcIlRhYmxlUm93XCIsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcy5wcm9wcy5pbnN0YW5jZTtcbiAgICB2YXIgY29sdW1ucyA9IHRoaXMucHJvcHMuY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFwidGRcIixcbiAgICAgICAgeyBrZXk6IGluc3RhbmNlW2NvbHVtbi5rZXldIH0sXG4gICAgICAgIGluc3RhbmNlW2NvbHVtbi5rZXldXG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJ0clwiLFxuICAgICAgbnVsbCxcbiAgICAgIGNvbHVtbnNcbiAgICApO1xuICB9XG59KTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gVGFibGVSb3c7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWxSaFlteGxVbTkzTG1weklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFc1NVRkJTU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXpzN08wRkJReTlDTEZGQlFVMHNSVUZCUlN4clFrRkJWenRCUVVOcVFpeFJRVUZKTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF6dEJRVU51UXl4UlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJReXhOUVVGTkxFVkJRVXM3UVVGREwwTXNZVUZEUlRzN1ZVRkJTU3hIUVVGSExFVkJRVVVzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1FVRkJRenRSUVVGRkxGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRPMDlCUVUwc1EwRkRNVVE3UzBGRFNDeERRVUZETEVOQlFVTTdRVUZEU0N4WFFVTkZPenM3VFVGRFJ5eFBRVUZQTzB0QlEwd3NRMEZEVER0SFFVTklPME5CUTBZc1EwRkJReXhEUVVGRE96dHJRa0ZGV1N4UlFVRlJJaXdpWm1sc1pTSTZJbFJoWW14bFVtOTNMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTR2YzNKakwycHpMeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW14bGRDQlVZV0pzWlZKdmR5QTlJRkpsWVdOMExtTnlaV0YwWlVOc1lYTnpLSHRjYmlBZ2NtVnVaR1Z5T2lCbWRXNWpkR2x2YmlncElIdGNiaUFnSUNCc1pYUWdhVzV6ZEdGdVkyVWdQU0IwYUdsekxuQnliM0J6TG1sdWMzUmhibU5sTzF4dUlDQWdJR3hsZENCamIyeDFiVzV6SUQwZ2RHaHBjeTV3Y205d2N5NWpiMngxYlc1ekxtMWhjQ2dvWTI5c2RXMXVLU0E5UGlCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNBOGRHUWdhMlY1UFh0cGJuTjBZVzVqWlZ0amIyeDFiVzR1YTJWNVhYMCtlMmx1YzNSaGJtTmxXMk52YkhWdGJpNXJaWGxkZlR3dmRHUStYRzRnSUNBZ0lDQXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lISmxkSFZ5YmlBb1hHNGdJQ0FnSUNBOGRISStYRzRnSUNBZ0lDQWdJSHRqYjJ4MWJXNXpmVnh1SUNBZ0lDQWdQQzkwY2o1Y2JpQWdJQ0FwTzF4dUlDQjlYRzU5S1R0Y2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1ZHRmliR1ZTYjNjN0lsMTkiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfUGFnZUNvbnRlbnQgPSByZXF1aXJlKCcvaG9tZS9rYXJvbC93b3Jrc3BhY2Uva2Fyb2wvZ2l0aHViL2VjMi1icm93c2VyL3NyYy9qcy9jb21wb25lbnRzL1BhZ2VDb250ZW50Jyk7XG5cbnZhciBfUGFnZUNvbnRlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFnZUNvbnRlbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5SZWFjdERPTS5yZW5kZXIoUmVhY3QuY3JlYXRlRWxlbWVudChfUGFnZUNvbnRlbnQyLmRlZmF1bHQsIG51bGwpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGVudCcpKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTFoYVc0dWFuTWlYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN1FVRkZRU3hSUVVGUkxFTkJRVU1zVFVGQlRTeERRVU5pTEdkRVFVRmxMRVZCUTJZc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZEYmtNc1EwRkJReUlzSW1acGJHVWlPaUp0WVdsdUxtcHpJaXdpYzI5MWNtTmxVbTl2ZENJNklpNHZjM0pqTDJwekx5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQlFZV2RsUTI5dWRHVnVkQ0JtY205dElDZGpiMjF3YjI1bGJuUnpMMUJoWjJWRGIyNTBaVzUwSnp0Y2JseHVVbVZoWTNSRVQwMHVjbVZ1WkdWeUtGeHVJQ0E4VUdGblpVTnZiblJsYm5RZ0x6NHNYRzRnSUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLQ2RqYjI1MFpXNTBKeWxjYmlrN0lsMTkiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgYXdzID0gZWxlY3Ryb25SZXF1aXJlKCcuL2F3cy1jb25maWcuanNvbicpO1xuXG52YXIgQVdTID0gZWxlY3Ryb25SZXF1aXJlKCdhd3Mtc2RrJyk7XG5BV1MuY29uZmlnLnVwZGF0ZShhd3MpO1xudmFyIGVjMiA9IG5ldyBBV1MuRUMyKHsgcmVnaW9uOiAnZXUtd2VzdC0xJyB9KTtcblxudmFyIGVjMkluc3RhbmNlcyA9IHtcbiAgZmV0Y2hJbnN0YW5jZXM6IGZ1bmN0aW9uIGZldGNoSW5zdGFuY2VzKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgZWMyLmRlc2NyaWJlSW5zdGFuY2VzKGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlcyA9IGRhdGEuUmVzZXJ2YXRpb25zLm1hcChmdW5jdGlvbiAoaW5zdGFuY2VPYmplY3QpIHtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBpbnN0YW5jZU9iamVjdC5JbnN0YW5jZXNbMF07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXR1czogaW5zdGFuY2UuU3RhdGUuTmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlVHlwZTogaW5zdGFuY2UuSW5zdGFuY2VUeXBlLFxuICAgICAgICAgICAga2V5TmFtZTogaW5zdGFuY2UuS2V5TmFtZSxcbiAgICAgICAgICAgIHRhZ3M6IGluc3RhbmNlLlRhZ3MubWFwKGZ1bmN0aW9uICh0YWcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBrZXk6IHRhZy5LZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHRhZy5WYWx1ZVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBwdWJsaWNJcEFkZHJlc3M6IGluc3RhbmNlLlB1YmxpY0lwQWRkcmVzcyxcbiAgICAgICAgICAgIGlkOiBpbnN0YW5jZS5JbnN0YW5jZUlkXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlc29sdmUoaW5zdGFuY2VzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBlYzJJbnN0YW5jZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1Wak1pNXFjeUpkTENKdVlXMWxjeUk2VzEwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJMRWxCUVVrc1IwRkJSeXhIUVVGSExHVkJRV1VzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhEUVVGRE96dEJRVVV2UXl4SlFVRkpMRWRCUVVjc1IwRkJSeXhsUVVGbExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdRVUZEY2tNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1FVRkRka0lzU1VGQlNTeEhRVUZITEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVU1zVFVGQlRTeEZRVUZGTEZkQlFWY3NSVUZCUXl4RFFVRkRMRU5CUVVNN08wRkJSVGRETEVsQlFVa3NXVUZCV1N4SFFVRkhPMEZCUTJwQ0xHZENRVUZqTEVWQlFVVXNNRUpCUVZjN1FVRkRla0lzVjBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4VlFVRlRMRTlCUVU4c1JVRkJSVHRCUVVOdVF5eFRRVUZITEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVlVGQlV5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZPMEZCUTNoRExGbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVU1zWTBGQll5eEZRVUZMTzBGQlEzaEVMR05CUVVrc1VVRkJVU3hIUVVGSExHTkJRV01zUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1FVRkRNME1zYVVKQlFVODdRVUZEVEN4clFrRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1R0QlFVTXpRaXgzUWtGQldTeEZRVUZGTEZGQlFWRXNRMEZCUXl4WlFVRlpPMEZCUTI1RExHMUNRVUZQTEVWQlFVVXNVVUZCVVN4RFFVRkRMRTlCUVU4N1FVRkRla0lzWjBKQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZETEVkQlFVY3NSVUZCU3p0QlFVTXZRaXh4UWtGQlR6dEJRVU5NTEcxQ1FVRkhMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWM3UVVGRFdpeHhRa0ZCU3l4RlFVRkZMRWRCUVVjc1EwRkJReXhMUVVGTE8yVkJRMnBDTEVOQlFVTTdZVUZEU0N4RFFVRkRPMEZCUTBZc01rSkJRV1VzUlVGQlJTeFJRVUZSTEVOQlFVTXNaVUZCWlR0QlFVTjZReXhqUVVGRkxFVkJRVVVzVVVGQlVTeERRVUZETEZWQlFWVTdWMEZEZUVJc1EwRkJRVHRUUVVOR0xFTkJRVU1zUTBGQlF6dEJRVU5JTEdWQlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenRQUVVOd1FpeERRVUZETEVOQlFVTTdTMEZEU2l4RFFVRkRMRU5CUVVNN1IwRkRTanREUVVOR0xFTkJRVU03TzJ0Q1FVVmhMRmxCUVZraUxDSm1hV3hsSWpvaVpXTXlMbXB6SWl3aWMyOTFjbU5sVW05dmRDSTZJaTR2YzNKakwycHpMeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW14bGRDQmhkM01nUFNCbGJHVmpkSEp2YmxKbGNYVnBjbVVvSnk0dllYZHpMV052Ym1acFp5NXFjMjl1SnlrN1hHNWNiblpoY2lCQlYxTWdQU0JsYkdWamRISnZibEpsY1hWcGNtVW9KMkYzY3kxelpHc25LVHNnWEc1QlYxTXVZMjl1Wm1sbkxuVndaR0YwWlNoaGQzTXBPMXh1ZG1GeUlHVmpNaUE5SUc1bGR5QkJWMU11UlVNeUtIdHlaV2RwYjI0NklDZGxkUzEzWlhOMExURW5mU2s3SUZ4dVhHNXNaWFFnWldNeVNXNXpkR0Z1WTJWeklEMGdlMXh1SUNCbVpYUmphRWx1YzNSaGJtTmxjem9nWm5WdVkzUnBiMjRvS1NCN1hHNGdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0daMWJtTjBhVzl1S0hKbGMyOXNkbVVwSUh0Y2JpQWdJQ0FnSUdWak1pNWtaWE5qY21saVpVbHVjM1JoYm1ObGN5aG1kVzVqZEdsdmJpaGxjbklzSUdSaGRHRXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElHbHVjM1JoYm1ObGN5QTlJR1JoZEdFdVVtVnpaWEoyWVhScGIyNXpMbTFoY0Nnb2FXNXpkR0Z1WTJWUFltcGxZM1FwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2FXNXpkR0Z1WTJVZ1BTQnBibk4wWVc1alpVOWlhbVZqZEM1SmJuTjBZVzVqWlhOYk1GMDdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFIxY3pvZ2FXNXpkR0Z1WTJVdVUzUmhkR1V1VG1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWMzUmhibU5sVkhsd1pUb2dhVzV6ZEdGdVkyVXVTVzV6ZEdGdVkyVlVlWEJsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhMlY1VG1GdFpUb2dhVzV6ZEdGdVkyVXVTMlY1VG1GdFpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhSaFozTTZJR2x1YzNSaGJtTmxMbFJoWjNNdWJXRndLQ2gwWVdjcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnJaWGs2SUhSaFp5NUxaWGtzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVTZJSFJoWnk1V1lXeDFaVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd2RXSnNhV05KY0VGa1pISmxjM002SUdsdWMzUmhibU5sTGxCMVlteHBZMGx3UVdSa2NtVnpjeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHbGtPaUJwYm5OMFlXNWpaUzVKYm5OMFlXNWpaVWxrWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVHRjYmlBZ0lDQWdJQ0FnY21WemIyeDJaU2hwYm5OMFlXNWpaWE1wTzF4dUlDQWdJQ0FnZlNrN1hHNGdJQ0FnZlNrN1hHNGdJSDFjYm4wN1hHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHVmpNa2x1YzNSaGJtTmxjenNpWFgwPSJdfQ==
